AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy two EC2 instances with user data, security groups, and load balancing with weighted distribution

Parameters:
  AMI:
    Description: AMI ID
    Type: String

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro

  KeyPairName:
    Description: Key Pair Name
    Type: String

  VPC:
    Description: VPC ID
    Type: String

  Subnet1:
    Description: Subnet ID for the first subnet
    Type: String

  Subnet2:
    Description: Subnet ID for the second subnet
    Type: String

  HTTPSCert:
    Description: Certificate to use with the HTTPS listener
    Type: String


Resources:
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP and HTTPS access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  EC2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      ImageId: !Ref AMI
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref Subnet1  
      UserData: !Base64 |
        #!/bin/bash
        yum update -y
        yum install httpd -y
        service httpd start
        cd /var/www/html
        echo "<html><body><h1>Hello!!</h1></body></html>" > index.html 

  EC2Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      ImageId: !Ref AMI
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref Subnet2  
      UserData: !Base64 |
        #!/bin/bash
        yum update -y
        yum install httpd -y
        service httpd start
        cd /var/www/html
        echo "<html><body><h1>Hello from the other side!</h1></body></html>" > index.html   

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: MentorTaskLoadBalancer
      Subnets: 
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: internet-facing
    DependsOn:
      - SecurityGroup


  TargetGroup1:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: TargetGroup1
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      Targets:
        - Id: !Ref EC2Instance1
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: /

  TargetGroup2:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: TargetGroup2
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      Targets:
        - Id: !Ref EC2Instance2
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: /

  ListenerHTTP:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup1
                Weight: 75
              - TargetGroupArn: !Ref TargetGroup2
                Weight: 25
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerHTTPS:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup1
                Weight: 75
              - TargetGroupArn: !Ref TargetGroup2
                Weight: 25
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref HTTPSCert
