AWSTemplateFormatVersion: '2010-09-09'
Description:  |
  This CloudFormation template deploys two EC2 instances with user data, security groups, private subnets, 
  route tables and their associations, a NAT gateway, and a load balancer configured for weighted distribution.
  
Parameters:
  AMI:
    Description: AMI ID
    Type: String

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro

  KeyPairName:
    Description: Key Pair Name
    Type: String

  VPC:
    Description: VPC ID
    Type: String

  Subnet1:
    Description: Subnet ID for the first subnet
    Type: String

  Subnet2:
    Description: Subnet ID for the second subnet
    Type: String

  HTTPSCert:
    Description: Certificate to use with the HTTPS listener
    Type: String

  PrivateSubnet1Cidr:
    Type: String
    Description: The CIDR block for the first private subnet.

  PrivateSubnet2Cidr:
    Type: String
    Description: The CIDR block for the second private subnet.


Resources:
## CREATING SECURITY GROUP USED IN EC2 AND LOADBALANCER
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP and HTTPS access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0  

## CREATING PRIVATE SUBNET
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: PrivateSubnet2

## CREATING NAT GATEWAYS
  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref Subnet1
      Tags:
        - Key: Name
          Value: PrivateNatGateway1


  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref Subnet2
      Tags:
        - Key: Name
          Value: PrivateNatGateway2  

## CREATING ROUTE TABLES
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable2

## CREATING ROUTE TABLE ASSOCIATIONS
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

## CREATING ROUTES FOR THE NAT GATEWAY TO ROUTE TABLES
  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: NatGateway1
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: NatGateway2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

## IAM ROLE FOR EC2 TO ACCESS SSM
  EC2SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

## INSTANCE PROFILE TO BE ASSOCIATED WITH EC2 INSTANCES
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2SSMRole
      Path: /

## CREATING INSTANCES
  EC2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      ImageId: !Ref AMI
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref PrivateSubnet1  
      UserData: !Base64 |
        #!/bin/bash
        yum update -y
        yum install httpd -y
        service httpd start
        cd /var/www/html
        echo "<html><body><h1>Hello!!</h1></body></html>" > index.html

  EC2Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      ImageId: !Ref AMI
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref PrivateSubnet2  
      UserData: !Base64 |
        #!/bin/bash
        yum update -y
        yum install httpd -y
        service httpd start
        cd /var/www/html
        echo "<html><body><h1>Hello from the other side!</h1></body></html>" > index.html

## CREATING LOADBALANCERS, TWO TARGET GROUPS, AND TWO LISTENERS
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: MentorTaskLoadBalancer
      Subnets: 
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: internet-facing
    DependsOn: 
        - SecurityGroup  

  TargetGroup1:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: TargetGroup1
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      Targets:
        - Id: !Ref EC2Instance1
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: /

  TargetGroup2:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: TargetGroup2
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      Targets:
        - Id: !Ref EC2Instance2
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: /

  ListenerHTTP:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup1
                Weight: 75
              - TargetGroupArn: !Ref TargetGroup2
                Weight: 25
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerHTTPS:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup1
                Weight: 75
              - TargetGroupArn: !Ref TargetGroup2
                Weight: 25
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref HTTPSCert
