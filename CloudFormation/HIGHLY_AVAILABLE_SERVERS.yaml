AWSTemplateFormatVersion: '2010-09-09'
Description: |
  This launch template will deploy a highly available web server. It includes two launch configurations, an auto scaling group,
  and a load balancer. Prior to running this CloudFormation template you should run the ImageBuilder stack and then run the
  pipeline to create the AMI. 

Parameters:
  AMI:
    Type: "String"
    Description: "AMI ID for version 1 of the web application"

  KeyPairName:
    Type: "String"
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instances"

  InstanceType:
    Description: EC2 Instance Type
    Type: String
    Default: t2.micro  

  VPC:
    Description: VPC ID
    Type: String

  Subnet1:
    Description: Subnet ID for the first subnet
    Type: String

  Subnet2:
    Description: Subnet ID for the second subnet
    Type: String

  PrivateSubnet1Cidr:
    Type: String
    Description: The CIDR block for the first private subnet.

  PrivateSubnet2Cidr:
    Type: String
    Description: The CIDR block for the second private subnet.

Resources:
  ## CREATING SECURITY GROUP USED IN EC2 AND LOAD BALANCER
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP and HTTPS access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0  

  ## CREATING PRIVATE SUBNET
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  ## CREATING NAT GATEWAYS
  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref Subnet1
      Tags:
        - Key: Name
          Value: PrivateNatGateway1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref Subnet2
      Tags:
        - Key: Name
          Value: PrivateNatGateway2  

  ## CREATING ROUTE TABLES
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable2

  ## CREATING ROUTE TABLE ASSOCIATIONS
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  ## CREATING ROUTES FOR THE NAT GATEWAY TO ROUTE TABLES
  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: NatGateway1
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: NatGateway2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  
  ## CREATING LOAD BALANCER
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "WebAppLoadBalancer"
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  ## CREATING TARGET GROUP FOR LOAD BALANCER
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "WebAppTargetGroup"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckProtocol: HTTP
      HealthCheckPort: "80"
      HealthCheckPath: "/"
      Matcher:
        HttpCode: "200"
      TargetType: instance

  ## CREATING LOAD BALANCER LISTENER
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

## LAUNCH TEMPLATE THAT CALLS IN AMI CREATED BY IMAGE BUILDER IN FIRST STEP
  LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: "LaunchTemplate"
      LaunchTemplateData:
        ImageId: !Ref AMI
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref SecurityGroup

## AUTOSCALING GROUP
  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: "2"
      MaxSize: "10"
      DesiredCapacity: "2"
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: "WebApp"
          PropagateAtLaunch: true

## SCHEDULED SCALE UP AND SCALE DOWN
  ScaleUpAtNoon:
    Type: "AWS::AutoScaling::ScheduledAction"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      Recurrence: "0 17 * * MON-FRI" # 12 p.m. EST
      DesiredCapacity: 7

  ScaleDownAfterNoon:
    Type: "AWS::AutoScaling::ScheduledAction"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      Recurrence: "0 18 * * MON-FRI" # 1 p.m. EST
      DesiredCapacity: 2
