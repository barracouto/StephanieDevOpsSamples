AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy an autoscaled and load balanced web server environment with security restrictions and NACL rules.

Parameters:
  VPCID:
    Description: VPC ID where resources will be deployed
    Type: String
    Default: ""
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: ""
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: String
    Default: ""
  AllowedIP:
    Description: IP address range that is allowed to access the web server
    Type: String
    Default: 0.0.0.0/0
  DeniedIP:
    Description: IP address to be explicitly denied in the NACL (e.g., 203.0.113.5)
    Type: String
    Default: ""
  AMIId:
    Description: AMI ID for the EC2 instances
    Type: String
    Default: ""

Resources:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to web servers
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedIP
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedIP
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
  
  EC2SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2SSMRole
      Path: /

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCID
      CidrBlock: 172.31.224.0/28
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCID
      CidrBlock: 172.31.225.0/28
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true

  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - !Ref Subnet1
        - !Ref Subnet2
      LaunchConfigurationName: !Ref WebServerLaunchConfiguration
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '2'
      TargetGroupARNs: [!Ref WebServerTargetGroup]
      Tags:
        - Key: Name
          Value: RestrictIP
          PropagateAtLaunch: true
        - Key: Name
          Value: IPRestrict
          PropagateAtLaunch: true
  
  WebServerLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMIId
      InstanceType: !Ref InstanceType
      SecurityGroups: [!Ref WebServerSecurityGroup]
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd
          cd /var/www/html
          echo "<html><body><h1>Access Granted</h1></body></html>" > index.html


  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCID
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: '80'
      HealthCheckPath: /
      Matcher:
        HttpCode: '200'

  WebServerLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: 
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups: [!Ref WebServerSecurityGroup]

  WebServerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebServerLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup
  
  WebServerNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: WebServerNACL

  NACLSubnetAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet1
      NetworkAclId: !Ref WebServerNACL

  NACLSubnetAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet2
      NetworkAclId: !Ref WebServerNACL

  NACLInboundDenyEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref WebServerNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: deny
      Egress: false
      CidrBlock: !Ref DeniedIP
  
  NACLInboundAllowEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref WebServerNACL
      RuleNumber: 200
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  NACLEgressAllowEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref WebServerNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
